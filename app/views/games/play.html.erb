<!DOCTYPE html>
<html>

<div class="fixed inset-0 -z-10">
<% if @game.background_image.attached? %>
<div class="fixed inset-0 -z-10"
     style="background-image: url('<%= url_for(@game.background_image) %>');
            background-size: cover;
            background-position: center;">
</div>
<% else %>
<div class="fixed inset-0 -z-10" style="background-color: <%= @game.background_color.presence || '#eeeeee' %>;">
  <svg class="absolute top-0 left-0 w-full h-40" viewBox="0 0 1440 320" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill="<%= @game.text_color %>" fill-opacity="0.6"
          d="M0,128L80,112C160,96,320,64,480,85.3C640,107,800,181,960,197.3C1120,213,1280,171,1360,149.3L1440,128V0H0Z">
    </path>
  </svg>
  <svg class="absolute bottom-0 left-0 w-full h-40" viewBox="0 0 1440 320" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill="<%= @game.text_color %>" fill-opacity="0.6"
          d="M0,160L80,165.3C160,171,320,181,480,165.3C640,149,800,107,960,96C1120,85,1280,107,1360,117.3L1440,128V320H0Z">
    </path>
  </svg>
  <div class="absolute inset-0 bg-pattern"></div>
</div>
<% end %>
</div>

<div class="bg-white shadow-lg rounded-3xl p-10 w-full max-w-6xl mx-auto min-h-screen overflow-auto relative z-10 flex flex-col justify-between">
  <h1 class="text-5xl font-bold text-center mb-10" style="color: <%= @game.header_color %>;">
    <%= @game.start_text %>
  </h1>

  <div class="flex justify-around mb-8 text-3xl flex-wrap gap-y-4">
    <% @players.each do |player| %>
      <div class="text-center">
        <p class="font-semibold" style="color: <%= @game.text_color %>;">
          <%= player.first_name %>
        </p>
        <p style="color: <%= @game.text_color %>;">
          Puntaje: <span id="score-<%= player.id %>">0</span>
        </p>
      </div>
    <% end %>
  </div>

  <div class="flex justify-between mb-8 text-3xl">
    <p style="color: <%= @game.text_color %>;">
      Turno de: <span id="current-player"><%= @current_player.first_name %></span>
    </p>
    <p style="color: <%= @game.text_color %>;">
      Tiempo restante: <span id="timer"><%= @remaining_time %></span> s
    </p>
  </div>
  <div class="grid grid-cols-3 gap-6 auto-rows-auto justify-center">
  <% @images.each_with_index do |image, index| %>
   <div class="card cursor-pointer border border-gray-300 rounded-2xl overflow-hidden relative aspect-w-3 aspect-h-2" data-index="<%= index %>" onclick="flipCard(this)">
    <% if @game.backside_image.attached? %>
     <img src="<%= url_for(@game.backside_image) %>" alt="Carta reverso" class="back w-full h-full object-contain" />
    <% else %>
     <div class="back w-full h-full bg-gray-300 flex items-center justify-center text-2xl">Carta</div>
    <% end %>
    <img src="<%= url_for(image) %>" alt="Imagen de juego" class="front hidden w-full h-full object-contain absolute inset-0" />
   </div>
  <% end %>
</div>
<div class="flex justify-center">
  <%= link_to start_game_path(@game, locale: I18n.locale),
      class: "flex items-center justify-center text-white font-bold text-3xl sm:text-4xl px-8 py-4 shadow-2xl transition-transform transform hover:scale-105 text-center",
      style: "background-color: #{@game.header_color};" do %>
    <img src="<%= asset_path('icon-home.png') %>" alt="Play" class="w-12 h-12 sm:w-14 sm:h-14 mr-2" />
    <span><%= t('games.finish.back_to_start').gsub(' ', '<br>').html_safe %></span>
  <% end %>
</div>

  <p id="game-status" class="text-center mt-10 text-3xl font-semibold" style="color: <%= @game.text_color %>;">
    <%= @game.during_text %>
  </p>
</div>

<style>
  html, body {
    height: 100%;
    margin: 0;
    overflow: hidden;
  }
  .bg-pattern {
    background-image: linear-gradient(45deg, <%= @game.text_color %> 25%, transparent 25%, transparent 75%, <%= @game.text_color %> 75%),
                      linear-gradient(-45deg, <%= @game.text_color %> 25%, transparent 25%, transparent 75%, <%= @game.text_color %> 75%);
    background-size: 40px 40px;
    background-position: 0 0, 20px 20px;
    opacity: 0.1;
  }
  .animate-pulse {
    animation: pulse 0.5s ease-in-out;
  }
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }
  .aspect-w-1 {
    aspect-ratio: 1 / 1;
  }
</style>

<script>
  let flippedCards = [];
  let remainingTime = <%= @remaining_time %>;
  let timerInterval = setInterval(updateTimer, 1000);
  let currentPlayerIndex = 0;
  const players = <%= raw @players.to_json(only: [:id, :first_name]) %>;
  const scores = {};

  players.forEach(player => {
    scores[player.id] = 0;
  });

  function flipCard(card) {
    if (flippedCards.length < 2 && !card.classList.contains("matched")) {
      let frontImg = card.querySelector(".front");
      let backImg = card.querySelector(".back");
      frontImg.classList.remove("hidden");
      backImg.classList.add("hidden");
      flippedCards.push(card);
      if (flippedCards.length === 2) {
        setTimeout(checkMatch, 1000);
      }
    }
  }

  function checkMatch() {
    let [card1, card2] = flippedCards;
    let src1 = card1.querySelector(".front").src;
    let src2 = card2.querySelector(".front").src;
    if (src1 === src2) {
      card1.classList.add("matched");
      card2.classList.add("matched");
      const currentPlayer = players[currentPlayerIndex];
      scores[currentPlayer.id] += 100;
      updateScoreDisplay(currentPlayer.id);

      
      fetch(`/<%= I18n.locale %>/players/${currentPlayer.id}/update_score`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
        },
        body: JSON.stringify({ score: scores[currentPlayer.id] })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 'error') {
          console.error('Error al actualizar el puntaje:', data.errors);
        }
      })
      .catch((error) => {
        console.error('Error al enviar la actualización del puntaje:', error);
      });

    } else {
      setTimeout(() => {
        card1.querySelector(".front").classList.add("hidden");
        card1.querySelector(".back").classList.remove("hidden");
        card2.querySelector(".front").classList.add("hidden");
        card2.querySelector(".back").classList.remove("hidden");
      }, 1000);
      currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
      updateCurrentPlayerDisplay();
    }
    flippedCards = [];
    checkGameEnd();
  }

  function updateScoreDisplay(playerId) {
    const scoreElement = document.getElementById(`score-${playerId}`);
    scoreElement.innerText = scores[playerId];
    scoreElement.classList.add("animate-pulse");
    setTimeout(() => {
      scoreElement.classList.remove("animate-pulse");
    }, 500);
  }

  function updateCurrentPlayerDisplay() {
    const currentPlayer = players[currentPlayerIndex];
    document.getElementById("current-player").innerText = currentPlayer.first_name;
  }

  function updateTimer() {
    remainingTime--;
    document.getElementById("timer").innerText = remainingTime;
    if (remainingTime <= 0) {
      clearInterval(timerInterval);
      endGame();
    }
  }

  function checkGameEnd() {
    const allMatched = document.querySelectorAll(".card.matched").length === <%= @images.length %>;
    if (allMatched) {
      endGame();
    }
  }

  function endGame() {
  clearInterval(timerInterval);
  let highestScore = -1;
  let winner = null;
  players.forEach(player => {
   if (scores[player.id] > highestScore) {
    highestScore = scores[player.id];
    winner = player;
   } else if (scores[player.id] === highestScore && highestScore > -1) {
    winner = null; // Empate
   }
  });

  let resultadoTexto;
  if (winner) {
   resultadoTexto = `¡${winner.first_name} ha ganado con ${highestScore} puntos!`;
  } else {
   resultadoTexto = "¡El juego ha terminado en empate!";
  }

  // Enviar el resultado al servidor usando AJAX
  fetch("<%= finish_game_path(@game.id, locale: I18n.locale.to_s) %>", { // Asegúrate de pasar @game.id
   method: 'POST',
   headers: {
    'Content-Type': 'application/json',
    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
   },
   body: JSON.stringify({ resultado: resultadoTexto })
  })
  .then(response => response.json())
  .then(data => {
   // Redirigir a la página de finalización después de recibir la confirmación
   if (data.redirect_url) {
    window.location.href = data.redirect_url;
   }
  })
  .catch((error) => {
   console.error('Error al enviar el resultado:', error);
   // Opcional: Redirigir incluso si hay un error
   window.location.href = "<%= finish_game_path(@game, locale: I18n.locale.to_s) %>";
  });
 }
</script>

</body>
</html>



 

 




